/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const DEFAULT_SETTINGS = {
    template: `## {{searchTerm}}\n {{text}}\n> [Additional info]({{url}})`,
    shouldUseParagraphTemplate: true,
    shouldBoldSearchTerm: true,
    paragraphTemplate: `> {{paragraphText}}\n>\n`,
    language: "en",
    apiKey: "",
    maxDefinitions: 5,
};
class WordnikPlugin extends obsidian.Plugin {
    getApiUrl(title) {
        return "https://api.wordnik.com/v4/word.json/" + encodeURIComponent(title) + "/definitions?limit=200&includeRelated=false&useCanonical=false&includeTags=false&api_key=" + this.settings.apiKey;
    }
    formatExtractText(extract, searchTerm) {
        var textToReturn = "";
        for (var i = 0; i < extract.text.length; i++) {
            if (i < this.settings.maxDefinitions) {
                textToReturn += extract.text[i] + "\n";
            }
        }
        return textToReturn;
    }
    handleNotFound(searchTerm) {
        new obsidian.Notice(`${searchTerm} not found in the wordnik database.`);
    }
    handleCouldntResolveDisambiguation() {
        new obsidian.Notice(`Could not automatically resolve disambiguation.`);
    }
    hasDisambiguation(extract) {
        // if (extract.text.includes(disambiguationIdentifier)) {
        //   return true;
        // }
        return false;
    }
    parseResponse(json) {
        const definitions = [];
        for (let i = 0; i < Number(json["length"]); i++) {
            definitions.push("*" + json[i]["partOfSpeech"] + "*: " + json[i]["text"]);
        }
        const extract = {
            title: "word",
            text: definitions,
            url: json[0]["wordnikUrl"]
        };
        console.log(extract);
        return extract;
    }
    formatExtractInsert(extract, searchTerm) {
        const formattedText = this.formatExtractText(extract, searchTerm);
        const template = this.settings.template;
        const formattedTemplate = template
            .replace("{{text}}", formattedText)
            .replace("{{searchTerm}}", searchTerm)
            .replace("{{url}}", extract.url);
        return formattedTemplate;
    }
    getWordnikText(title) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = this.getApiUrl(title);
            console.log(url);
            const requestParam = {
                url: url,
            };
            const resp = yield obsidian.request(requestParam)
                .then((r) => JSON.parse(r))
                .catch(() => new obsidian.Notice("Failed to get Wordnik data. Check your internet connection."));
            console.log(resp);
            const extract = this.parseResponse(resp);
            return extract;
        });
    }
    pasteIntoEditor(editor, searchTerm) {
        return __awaiter(this, void 0, void 0, function* () {
            let extract = yield this.getWordnikText(searchTerm);
            if (!extract) {
                this.handleNotFound(searchTerm);
                return;
            }
            editor.replaceSelection(this.formatExtractInsert(extract, searchTerm));
        });
    }
    getWordnikTextForActiveFile(editor) {
        return __awaiter(this, void 0, void 0, function* () {
            const activeFile = yield this.app.workspace.getActiveFile();
            if (activeFile) {
                const searchTerm = activeFile.basename;
                if (searchTerm) {
                    yield this.pasteIntoEditor(editor, searchTerm);
                }
            }
        });
    }
    getWordnikTextForSearchTerm(editor) {
        return __awaiter(this, void 0, void 0, function* () {
            new WikipediaSearchModal(this.app, this, editor).open();
        });
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            this.addCommand({
                id: "wordnik-get-active-note-title",
                name: "Get Wordik data for Active Note Title",
                editorCallback: (editor) => this.getWordnikTextForActiveFile(editor),
            });
            this.addCommand({
                id: "wordnik-get-search-term",
                name: "Get Wordnik data for Search Term",
                editorCallback: (editor) => this.getWordnikTextForSearchTerm(editor),
            });
            this.addSettingTab(new WikipediaSettingTab(this.app, this));
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}
class WikipediaSearchModal extends obsidian.Modal {
    constructor(app, plugin, editor) {
        super(app);
        this.plugin = plugin;
        this.editor = editor;
    }
    onOpen() {
        let { contentEl } = this;
        contentEl.createEl("h2", { text: "Enter Search Term:" });
        const inputs = contentEl.createDiv("inputs");
        const searchInput = new obsidian.TextComponent(inputs).onChange((searchTerm) => {
            this.searchTerm = searchTerm;
        });
        searchInput.inputEl.focus();
        searchInput.inputEl.addEventListener("keydown", (event) => {
            if (event.key === "Enter") {
                this.close();
            }
        });
        const controls = contentEl.createDiv("controls");
        const searchButton = controls.createEl("button", {
            text: "Search",
            cls: "mod-cta",
            attr: {
                autofocus: true,
            },
        });
        searchButton.addEventListener("click", this.close.bind(this));
        const cancelButton = controls.createEl("button", { text: "Cancel" });
        cancelButton.addEventListener("click", this.close.bind(this));
    }
    onClose() {
        return __awaiter(this, void 0, void 0, function* () {
            let { contentEl } = this;
            contentEl.empty();
            if (this.searchTerm) {
                yield this.plugin.pasteIntoEditor(this.editor, this.searchTerm);
            }
        });
    }
}
class WikipediaSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl("h2", { text: "Obsidian Wordnik" });
        new obsidian.Setting(containerEl)
            .setName("Wordnik Language Prefix")
            .setDesc(`Choose Wordnik language prefix to use (ex. en for English)`)
            .addText((textField) => {
            textField
                .setValue(this.plugin.settings.language)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.language = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Wordnik Extract Template")
            .setDesc(`Set markdown template for extract to be inserted.\n
        Available template variables are {{text}}, {{searchTerm}} and {{url}}.
        `)
            .addTextArea((textarea) => textarea
            .setValue(this.plugin.settings.template)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.template = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName("Wordnik API Key")
            .setDesc("You will need to include your Wordnik API key to use this plugin.")
            .addText((textField) => {
            textField
                .setValue(this.plugin.settings.apiKey)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.apiKey = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Maximum Definitions")
            .setDesc("The most definitions from wordnik that will be shown in the result.")
            .addText((textField) => {
            textField
                .setValue(String(this.plugin.settings.maxDefinitions))
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.maxDefinitions = Number(value);
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Bold Search Term?")
            .setDesc("If set to true, the first instance of the search term will be **bolded**")
            .addToggle((toggle) => toggle
            .setValue(this.plugin.settings.shouldBoldSearchTerm)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.shouldBoldSearchTerm = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName("Use paragraph template?")
            .setDesc("If set to true, the paragraph template will be inserted for each paragraph of text for {{text}} in main template.")
            .addToggle((toggle) => toggle
            .setValue(this.plugin.settings.shouldUseParagraphTemplate)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.shouldUseParagraphTemplate = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName("Paragraph Template")
            .setDesc(`Set markdown template for extract paragraphs to be inserted.\n
        Available template variables are: {{paragraphText}}
        `)
            .addTextArea((textarea) => textarea
            .setValue(this.plugin.settings.paragraphTemplate)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.paragraphTemplate = value;
            yield this.plugin.saveSettings();
        })));
    }
}

module.exports = WordnikPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
